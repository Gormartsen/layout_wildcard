<?php
/**
 * @file
 * The Layout Wildcard module provides the ability to use a Layout in multiple
 * paths.
 *
*/

/**
 * Route handler callback; Execute the current route item or wrap in a layout.
 *
 * @param $router_item
 *   The menu router item for the page currently being loaded.
 * @return
 *   The fully built HTML content for this page, which will be wrapped in
 *   page.tpl.php.
 *
 * @ingroup callbacks
 */
function layout_wildcard_route_handler($router_item) {
  // If a different delivery callback is specified, we're probably not returning
  // HTML and it definitely should not be wrapped in a layout. Call the default
  // route handler and return its response directly.
  if (!backdrop_is_html() || !empty($router_item['delivery_callback']) || $router_item['page_callback'] === 'layout_page_callback') {
    return menu_default_route_handler($router_item);
  }

  $selected_layout = layout_wildcard_get_layout_by_path(NULL, $router_item);

  // Safety check that we don't show an admin layout to a user who cannot view
  // the admin theme. This may happen because the cached layout list does not
  // include a permissions check on the admin theme.
  if ($selected_layout->name === 'admin_default' && !user_access('view the administration theme')) {
    $selected_layout = layout_load('default');
  }

  // Special handling for 404 and 403 pages to render in admin theme. The
  // current path will be the 404/403 system path, and we need to check the
  // original path, which is stored in "destination" by
  // backdrop_deliver_html_page().
  if (in_array(backdrop_get_http_header('Status'), array('404 Not Found', '403 Forbidden')) && user_access('view the administration theme')) {
    if (isset($_GET['destination']) && path_is_admin($_GET['destination'])) {
      $selected_layout = layout_load('admin_default');
    }
  }

  if ($selected_layout) {
    // Render the layout.
    $renderer = layout_create_renderer($selected_layout->renderer_name, $selected_layout);
    if ($selected_layout->isDefault()) {
      $renderer->ensurePageContentBlock();
    }
    return $renderer->render();
  }

  // Fallback code if even the expected default layout cannot be found.
  return menu_default_route_handler($router_item);
}

/**
 * Get the layout which is active based on a path or router item.
 *
 * This may also be used to get the current layout on a page if no parameters
 * are passed. In which case the current path will be used.
 *
 * @param string $path
 *   The menu routing path, with all placeholders represented by "%" symbols.
 * @param $router_item
 *   The menu router item for the page currently being loaded.
 *   The $path parameter will be ignored if $router_item is specified.
 *
 * @return Layout
 *   The Layout object for the specified path.
 *
 * @since 1.4.0
 * @see layout_get_layout_by_path
 */
function layout_wildcard_get_layout_by_path($path = NULL, $router_item = NULL) {
  if (!isset($router_item)) {
    $router_item = menu_get_item($path);
  }

  $cache = &backdrop_static(__FUNCTION__);

  if (empty($cache[$router_item['path']])) {
    // If the path is a node preview path, check if a custom layout exists for
    // nodes and use that instead.
    // @ todo: This adds very specific code for node previews which too closely
    // couples Node and Layout modules. This needs to be reverted in a future
    // commit.
    $data = NULL;
    $node_types = node_type_get_types();
    foreach ($node_types as $type) {
      $preview_path = 'node/' . $type->type . '/preview';
      if ($router_item['path'] == $preview_path) {
        $tempstore_id = node_build_tempstore_id($type->type);
        $data = node_get_node_tempstore($tempstore_id);
        break;
      }
    }
    if ($data && $node_layouts = layout_wildcard_load_multiple_by_path('node/%', TRUE)) {
      $layouts = $node_layouts;
    }
    else {
      $layouts = layout_wildcard_load_multiple_by_path($router_item['path'], TRUE);
    }
    $selected_layout = NULL;
    foreach ($layouts as $layout) {
      // Contexts must be set before the layout's access may be checked.
      $contexts = $layout->getContexts();
      foreach ($contexts as $context) {
        if (isset($context->position)) {

          // Check for an object loaded by the menu router. Use a preview from
          // Tempstore if on a node preview page.
          // @ todo: This is also specific code for node previews which needs
          // to be reverted in a future commit.
          if (isset($router_item['map'][$context->position])) {
            $data = isset($data) ? $data : $router_item['map'][$context->position];
            $context->setData($data);
          }

          // If no context is set, load one using the layout info.
          if (!is_object($context->data)) {
            $context_info = layout_get_context_info($context->plugin);
            if (isset($context_info['load callback'])) {
              $context_data = call_user_func_array($context_info['load callback'], $router_item['original_map'][$context->position]);
              $context->setData($context_data);
            }
          }
        }
      }

      if (!$layout->disabled && $layout->checkAccess()) {
        $selected_layout = $layout;
        break;
      }
    }

    // If no layout matches at the path, use the default layout.
    if (!$selected_layout) {
      if (path_is_admin($router_item['path']) && user_access('view the administration theme')) {
        $selected_layout = layout_load('admin_default');
      }
      else {
        $selected_layout = layout_load('default');
      }
    }

    $cache[$router_item['path']] = $selected_layout;
  }

  return $cache[$router_item['path']];
}

/**
 * Load all layouts at a given path.
 *
 * @param string $path
 *   The menu routing path, with all placeholders represented by "%" symbols.
 *
 * @return Layout[]
 *   An array of load Layout object instances.
 * @see layout_load_multiple_by_path
 */
function layout_wildcard_load_multiple_by_path($path, $skip_menu_items = NULL) {
  if ($cache = cache('layout_path')->get($path)) {
    $layouts = $cache->data;

    // Populate these cached layouts into layout_load_multiple() to optimize
    // any future calls to it.
    $static_cache = &backdrop_static('layout_wildcard_load_multiple', array());
    $static_cache = array_merge($layouts, $static_cache);
  }
  else {
    $layout_names = layout_wildcard_get_path_layout_names($path);
    if (empty($layout_names)) {
      // Skip loading menu items for the default layouts.
      if (is_null($skip_menu_items)) {
        $skip_menu_items = TRUE;
      }
      if (path_is_admin($path)) {
        $layout_names[] = 'admin_default';
      }
      else {
        $layout_names[] = 'default';
      }
    }

    $layouts = layout_load_multiple($layout_names, $skip_menu_items);
    cache('layout_path')->set($path, $layouts);
  }
  return $layouts;
}

/**
 * Get a list of layouts that share a particular path.
 * @see layout_get_path_layout_names
 */
function layout_wildcard_get_path_layout_names($path) {
  $path_map = &backdrop_static(__FUNCTION__, array());

  $configs = layout_get_all_configs('layout');
  foreach ($configs as $layout_name => $config) {
    if (isset($config['path'])) {
      $path_map[$config['path']][] = $layout_name;
    }
    if (isset($config['settings']['paths']) && is_array($config['settings']['paths'])) {
      foreach($config['settings']['paths'] as $subpath) {
        $path_map[$subpath][] = $layout_name;
      }
    }
  }
  # Fix issue #2412
  $ancestors = menu_get_ancestors(explode("/", $path));
  foreach($ancestors as $ancestor_path) {
    if(isset($path_map[$ancestor_path])) {
      return $path_map[$ancestor_path];
    }
  }

  return isset($path_map[$path]) ? $path_map[$path] : array();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function layout_wildcard_form_layout_settings_form_alter(&$form, &$form_state) {
  $default_value = "";
  foreach($form_state['build_info']['args'][0]->settings['paths'] as $path){
    $default_value .= $path . "\n";
  }
  $form['paths'] = array(
    '#title' => t('Alternative paths'),
    '#description' => t('Optionally, specify one or more alternative paths to be handled by this layout (in addition to the primary path above). Note that contexts will only be available for the primary path. ') . t('Use the "%" (percent) symbol to indicate a wildcard in the path. i.e. "node/%" or "node/%/edit"'),
    '#type' => 'textarea',
    '#default_value' => $default_value,
  );
  $form['actions']['submit']['#validate'][] = 'layout_wildcard_settings_form_validate';
}

/**
 * Validate handler for layout_settings_form() that saves in-progress values.
 */
function layout_wildcard_settings_form_validate($form, &$form_state) {
  global $_layout_wildcard_paths;
  $_layout_wildcard_paths = array();
  if (isset($form_state['values']['paths'])) {
    $paths = explode("\n", $form_state['values']['paths']);
    foreach($paths as $path){
      $path = trim($path);
      if(!empty($path)) {
        $_layout_wildcard_paths[] = trim($path);
      }
    }
  }
}

/**
 * Implements hook_layout_presave()
 */
function layout_wildcard_layout_presave($layout) {
  global $_layout_wildcard_paths;
  if(isset($_layout_wildcard_paths)) {
    $layout->settings['paths'] = $_layout_wildcard_paths;
  }
}
